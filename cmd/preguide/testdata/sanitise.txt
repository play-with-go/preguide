# Test that we get the expected output when a step involves
# output that should sanitised

env regex_float='\d+(?:\.\d+)?'
env regex_int='\d+'
env regex_space='\s+'
env regex_maybe_space='\s*'

preguide gen -out _output
cmpregex _output/myguide_go115_en.markdown myguide/go115_en.markdown.golden
cmpregex myguide/go115_en_log.txt myguide/go115_en_log.txt.golden

-- myguide/en.markdown --
---
title: A test with output that should be sanitised
---
# Create a module

{{ step "step0" }}

# Create go file

{{ step "step1" }}

# Create test file

{{ step "step2" }}

# Test

{{ step "step3" }}

# Benchmark

{{ step "step4" }}

# go version

{{ step "step5" }}
{{ step "step6" }}
{{ step "step7" }}
-- myguide/steps.cue --
package steps

import "github.com/play-with-go/preguide"

Scenarios: go115: preguide.#Scenario & {
	Description: "Go 1.15"
}

Terminals: term1: preguide.#Terminal & {
	Description: "The main terminal"
	Scenarios: go115: Image: "this_will_never_be_used"
}

Steps: step0: preguide.#Command & { Source: """
go mod init example.com
"""}

Steps: step1: preguide.#Upload & { Target: "/home/gopher/hello.go", Source: """
package main

import "fmt"

func main() {
	fmt.Println("Hello, world!")
}

func Fib(n int) int {
        if n < 2 {
                return n
        }
        return Fib(n-1) + Fib(n-2)
}

""" }

Steps: step2: preguide.#Upload & { Target: "/home/gopher/hello_test.go", Source: """
package main

import (
	"fmt"
	"testing"
)

func TestHello(t *testing.T) {
	fmt.Println("Hello, world... from the test!")
}

func BenchmarkFib10(b *testing.B) {
        // run the Fib function b.N times
        for n := 0; n < b.N; n++ {
                Fib(10)
        }
}

""" }

Steps: step3: preguide.#Command & { Source: """
go test
"""}

Steps: step4: preguide.#Command & { Source: """
go test -bench=.
"""}

Steps: step5: preguide.#Upload & { Target: "/home/gopher/hello.go", Source: """
package main

import (
	"fmt"
)

func main() {
	fmt.Println("Hello, world!")
}

""" }

Steps: step6: preguide.#Command & { Source: """
go build -o hello
"""}

Steps: step7: preguide.#Command & { Source: """
go version -m ./hello
"""}

-- myguide/go115_en.markdown.golden --
---
guide: myguide
lang: en
title: A test with output that should be sanitised
---
# Create a module

<pre data-command-src="Z28gbW9kIGluaXQgZXhhbXBsZS5jb20K"><code class="language-.term1">$ go mod init example.com
go: creating new go.mod: module example.com
go: to add module requirements and sums:
	go mod tidy
</code></pre>

# Create go file

<pre data-upload-path="L2hvbWUvZ29waGVy" data-upload-src="aGVsbG8uZ28=:cGFja2FnZSBtYWluCgppbXBvcnQgImZtdCIKCmZ1bmMgbWFpbigpIHsKCWZtdC5QcmludGxuKCJIZWxsbywgd29ybGQhIikKfQoKZnVuYyBGaWIobiBpbnQpIGludCB7CiAgICAgICAgaWYgbiA8IDIgewogICAgICAgICAgICAgICAgcmV0dXJuIG4KICAgICAgICB9CiAgICAgICAgcmV0dXJuIEZpYihuLTEpICsgRmliKG4tMikKfQo=" data-upload-term=".term1"><code class="language-go">package main

import &#34;fmt&#34;

func main() &#123;
	fmt.Println(&#34;Hello, world!&#34;)
&#125;

func Fib(n int) int &#123;
        if n &lt; 2 &#123;
                return n
        &#125;
        return Fib(n-1) + Fib(n-2)
&#125;
</code></pre>

# Create test file

<pre data-upload-path="L2hvbWUvZ29waGVy" data-upload-src="aGVsbG9fdGVzdC5nbw==:cGFja2FnZSBtYWluCgppbXBvcnQgKAoJImZtdCIKCSJ0ZXN0aW5nIgopCgpmdW5jIFRlc3RIZWxsbyh0ICp0ZXN0aW5nLlQpIHsKCWZtdC5QcmludGxuKCJIZWxsbywgd29ybGQuLi4gZnJvbSB0aGUgdGVzdCEiKQp9CgpmdW5jIEJlbmNobWFya0ZpYjEwKGIgKnRlc3RpbmcuQikgewogICAgICAgIC8vIHJ1biB0aGUgRmliIGZ1bmN0aW9uIGIuTiB0aW1lcwogICAgICAgIGZvciBuIDo9IDA7IG4gPCBiLk47IG4rKyB7CiAgICAgICAgICAgICAgICBGaWIoMTApCiAgICAgICAgfQp9Cg==" data-upload-term=".term1"><code class="language-go">package main

import (
	&#34;fmt&#34;
	&#34;testing&#34;
)

func TestHello(t *testing.T) &#123;
	fmt.Println(&#34;Hello, world... from the test!&#34;)
&#125;

func BenchmarkFib10(b *testing.B) &#123;
        // run the Fib function b.N times
        for n := 0; n &lt; b.N; n++ &#123;
                Fib(10)
        &#125;
&#125;
</code></pre>

# Test

<pre data-command-src="Z28gdGVzdAo="><code class="language-.term1">$ go test
Hello, world... from the test!
PASS
ok  	example.com	${regex_float}s
</code></pre>

# Benchmark

<pre data-command-src="Z28gdGVzdCAtYmVuY2g9Lgo="><code class="language-.term1">$ go test -bench=.
Hello, world... from the test!
goos: linux
goarch: amd64
pkg: example.com
BenchmarkFib10${regex_space}${regex_int}${regex_space}${regex_float} ns/op
PASS
ok  	example.com	${regex_float}s
</code></pre>

# go version

<pre data-upload-path="L2hvbWUvZ29waGVy" data-upload-src="aGVsbG8uZ28=:cGFja2FnZSBtYWluCgppbXBvcnQgKAoJImZtdCIKKQoKZnVuYyBtYWluKCkgewoJZm10LlByaW50bG4oIkhlbGxvLCB3b3JsZCEiKQp9Cg==" data-upload-term=".term1"><code class="language-go">package main

import (
	&#34;fmt&#34;
)

func main() &#123;
	fmt.Println(&#34;Hello, world!&#34;)
&#125;
</code></pre>
<pre data-command-src="Z28gYnVpbGQgLW8gaGVsbG8K"><code class="language-.term1">$ go build -o hello
</code></pre>
<pre data-command-src="Z28gdmVyc2lvbiAtbSAuL2hlbGxvCg=="><code class="language-.term1">$ go version -m ./hello
./hello: go1.19.1
	path	example.com
	mod	example.com	(devel)
</code></pre>
<script>let pageGuide="myguide"; let pageLanguage="en"; let pageScenario="go115";</script>
-- myguide/go115_en_log.txt.golden --
$ go mod init example.com
go: creating new go.mod: module example.com
go: to add module requirements and sums:
	go mod tidy
$ cat <<EOD > /home/gopher/hello.go
package main

import "fmt"

func main() {
	fmt.Println("Hello, world!")
}

func Fib(n int) int {
        if n < 2 {
                return n
        }
        return Fib(n-1) + Fib(n-2)
}

EOD
$ cat <<EOD > /home/gopher/hello_test.go
package main

import (
	"fmt"
	"testing"
)

func TestHello(t *testing.T) {
	fmt.Println("Hello, world... from the test!")
}

func BenchmarkFib10(b *testing.B) {
        // run the Fib function b.N times
        for n := 0; n < b.N; n++ {
                Fib(10)
        }
}

EOD
$ go test
Hello, world... from the test!
PASS
ok  	example.com	${regex_float}s
$ go test -bench=.
Hello, world... from the test!
goos: linux
goarch: amd64
pkg: example.com
BenchmarkFib10${regex_space}${regex_int}${regex_space}${regex_float} ns/op
PASS
ok  	example.com	${regex_float}s
$ cat <<EOD > /home/gopher/hello.go
package main

import (
	"fmt"
)

func main() {
	fmt.Println("Hello, world!")
}

EOD
$ go build -o hello
$ go version -m ./hello
./hello: go1.19.1
	path	example.com
	mod	example.com	(devel)
