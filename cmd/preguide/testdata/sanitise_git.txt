# Test that we get the expected output when a step involves
# git commands that should be sanitised

# Intial run
preguide gen -out _output
! stdout .+
! stderr .+
cmp _output/myguide_go115_en.markdown myguide/go115_en.markdown.golden
cmp myguide/go115_en_log.txt myguide/go115_en_log.txt.golden

-- go.mod --
module mod.com/init

go 1.12

-- myguide/en.markdown --
---
title: A test with output that should be sanitised
---

<!--step: step1 -->

<!--step: step2 -->

<!--step: step3 -->

<!--step: step4 -->

<!--step: step5 -->

<!--step: step6 -->

<!--step: step7 -->
-- myguide/steps.cue --
package steps

import "github.com/play-with-go/preguide"

Scenarios: go115: preguide.#Scenario & {
	Description: "Go 1.15"
}

Terminals: term1: preguide.#Terminal & {
	Description: "The main terminal"
	Scenarios: go115: Image: "this_will_never_be_used"
}

Steps: step1: preguide.#Command & {
	Source: """
		mkdir example
		cd example
		git init
		"""
}

Steps: step2: preguide.#Upload & {
	Target: "/home/gopher/example/README.md"
	Source: """
		This is a test.
		"""
}

Steps: step3: preguide.#Command & {
	Source: """
		git add -A
		git commit -am 'Initial commit'
		"""
}

Steps: step4: preguide.#Command & {
	InformationOnly: true
	RandomReplace: "abcdefg123456789"
	Source: """
		git rev-parse HEAD
		"""
}

Steps: first_random_commit: preguide.#Command & {
	InformationOnly: true
	RandomReplace: "abcd123"
	Source: """
		git rev-parse --short HEAD
		"""
}

Steps: step5: preguide.#Upload & {
	Target: "/home/gopher/example/README.md"
	Source: """
		This is a test... again!
		"""
}

Steps: step6: preguide.#Command & {
	Source: """
		git add -A
		git commit -am 'Second commit'
		"""
}

Steps: second_random_commit: preguide.#Command & {
	InformationOnly: true
	RandomReplace: "abcd123"
	Source: """
		git rev-parse --short HEAD
		"""
}

Steps: step7: preguide.#Command & {
	InformationOnly: true
	RandomReplace: "abcdefg123456789"
	Source: """
		git rev-parse HEAD
		"""
}

-- myguide/go115_en.markdown.golden --
---
guide: myguide
lang: en
title: A test with output that should be sanitised
---

```.term1
$ mkdir example
$ cd example
$ git init
Initialized empty Git repository in /home/gopher/example/.git/
```
{:data-command-src="bWtkaXIgZXhhbXBsZQpjZCBleGFtcGxlCmdpdCBpbml0Cg=="}

<pre data-upload-path="L2hvbWUvZ29waGVyL2V4YW1wbGU=" data-upload-src="UkVBRE1FLm1k:VGhpcyBpcyBhIHRlc3Qu" data-upload-term=".term1"><code class="language-md">This is a test.</code></pre>

```.term1
$ git add -A
$ git commit -am 'Initial commit'
[main (root-commit) abcd123] Initial commit
 1 file changed, 1 insertion(+)
 create mode 100644 README.md
```
{:data-command-src="Z2l0IGFkZCAtQQpnaXQgY29tbWl0IC1hbSAnSW5pdGlhbCBjb21taXQnCg=="}

```.term1
$ git rev-parse HEAD
abcdefg123456789
```
{:data-command-src="Z2l0IHJldi1wYXJzZSBIRUFECg=="}

<pre data-upload-path="L2hvbWUvZ29waGVyL2V4YW1wbGU=" data-upload-src="UkVBRE1FLm1k:VGhpcyBpcyBhIHRlc3QuLi4gYWdhaW4h" data-upload-term=".term1"><code class="language-md">This is a test... again!</code></pre>

```.term1
$ git add -A
$ git commit -am 'Second commit'
[main abcd123] Second commit
 1 file changed, 1 insertion(+), 1 deletion(-)
```
{:data-command-src="Z2l0IGFkZCAtQQpnaXQgY29tbWl0IC1hbSAnU2Vjb25kIGNvbW1pdCcK"}

```.term1
$ git rev-parse HEAD
abcdefg123456789
```
{:data-command-src="Z2l0IHJldi1wYXJzZSBIRUFECg=="}
<script>let pageGuide="myguide"; let pageLanguage="en"; let pageScenario="go115";</script>
-- myguide/go115_en_log.txt.golden --
$ mkdir example
$ cd example
$ git init
Initialized empty Git repository in /home/gopher/example/.git/
$ cat <<EOD > /home/gopher/example/README.md
This is a test.
EOD
$ git add -A
$ git commit -am 'Initial commit'
[main (root-commit) abcd123] Initial commit
 1 file changed, 1 insertion(+)
 create mode 100644 README.md
$ git rev-parse HEAD
abcdefg123456789
$ git rev-parse --short HEAD
abcd123
$ cat <<EOD > /home/gopher/example/README.md
This is a test... again!
EOD
$ git add -A
$ git commit -am 'Second commit'
[main abcd123] Second commit
 1 file changed, 1 insertion(+), 1 deletion(-)
$ git rev-parse --short HEAD
abcd123
$ git rev-parse HEAD
abcdefg123456789
