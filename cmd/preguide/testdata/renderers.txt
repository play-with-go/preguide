# Test that we get the expected behaviour when using different types of
# renderers for upload steps

# Intial run
preguide gen -out _output
! stdout .+
! stderr .+
cmp _output/myguide.markdown myguide/en_pre.markdown.golden
cmp myguide/out/gen_out.cue myguide/out/gen_out_pre.cue.golden

# Check that we get a cache hit second time around
preguide -debug gen -out _output
! stdout .+
stderr '^cache hit for '$WORK'/myguide: will not re-run script$'
cmp _output/myguide.markdown myguide/en_pre.markdown.golden
cmp myguide/out/gen_out.cue myguide/out/gen_out_pre.cue.golden

# Change the renderertype and ensure we get a cache hit but
# different output schema
cp myguide/steps.cue.changed myguide/steps.cue
preguide -debug gen -out _output
! stdout .+
stderr '^cache hit for '$WORK'/myguide: will not re-run script$'
cmp _output/myguide.markdown myguide/en_post.markdown.golden
cmp myguide/out/gen_out.cue myguide/out/gen_out_post.cue.golden

-- myguide/en.markdown --
---
title: A test with all directives
---
# Step 1

<!--step: step0 -->

<!--step: step1 -->

-- myguide/steps.cue --
package steps

import "github.com/play-with-go/preguide"

Scenarios: go115: preguide.#Scenario & {
	Description: "Go 1.15"
}

Terminals: term1: preguide.#Terminal & {
	Description: "The main terminal"
	Scenarios: go115: Image: "this_will_never_be_used"
}

Steps: step0: preguide.#Command & {
	Source: """
echo -n "Hello"
"""
}

// Include some backtick text in the file contents to verify
// that when uploading the file the backtick portion is not
// expanded by bash
Steps: step1: preguide.#Upload & {
	Target:   "/home/gopher/somewhere.md"
	Source: """
This is some markdown `with code`
Another line
A third line
"""
}
-- myguide/steps.cue.changed --
package steps

import "github.com/play-with-go/preguide"

Scenarios: go115: preguide.#Scenario & {
	Description: "Go 1.15"
}

Terminals: term1: preguide.#Terminal & {
	Description: "The main terminal"
	Scenarios: go115: Image: "this_will_never_be_used"
}

Steps: step0: preguide.#Command & {
	Source: """
echo -n "Hello"
"""
}

Steps: step1: preguide.#Upload & {
	Target:   "/home/gopher/somewhere.md"
	Renderer: preguide.#RenderLineRanges & {
		Lines: [[2,2]]
	}
	Source: """
This is some markdown `with code`
Another line
A third line
"""
}

-- myguide/en_pre.markdown.golden --
---
guide: myguide
lang: en
title: A test with all directives
---
# Step 1

```.term1
$ echo -n "Hello"
Hello
```
{:data-command-src="ZWNobyAtbiAiSGVsbG8iCg=="}

<pre data-upload-path="L2hvbWUvZ29waGVy" data-upload-src="c29tZXdoZXJlLm1k:VGhpcyBpcyBzb21lIG1hcmtkb3duIGB3aXRoIGNvZGVgCkFub3RoZXIgbGluZQpBIHRoaXJkIGxpbmU=" data-upload-term=".term1"><code class="language-md">This is some markdown `with code`
Another line
A third line</code></pre>

<script>let pageGuide="myguide"; let pageLanguage="en"; let pageScenario="go115";</script>
-- myguide/en_post.markdown.golden --
---
guide: myguide
lang: en
title: A test with all directives
---
# Step 1

```.term1
$ echo -n "Hello"
Hello
```
{:data-command-src="ZWNobyAtbiAiSGVsbG8iCg=="}

<pre data-upload-path="L2hvbWUvZ29waGVy" data-upload-src="c29tZXdoZXJlLm1k:VGhpcyBpcyBzb21lIG1hcmtkb3duIGB3aXRoIGNvZGVgCkFub3RoZXIgbGluZQpBIHRoaXJkIGxpbmU=" data-upload-term=".term1"><code class="language-md">...
Another line
...</code></pre>

<script>let pageGuide="myguide"; let pageLanguage="en"; let pageScenario="go115";</script>
-- myguide/out/gen_out_pre.cue.golden --
package out

Terminals: [{
	Description: "The main terminal"
	Scenarios: {
		go115: {
			Image: "this_will_never_be_used"
		}
	}
	Name: "term1"
}]
Scenarios: [{
	Description: "Go 1.15"
	Name:        "go115"
}]
Networks: []
Env: []
Steps: {
	step1: {
		Order: 1
		Source: """
			This is some markdown `with code`
			Another line
			A third line
			"""
		Renderer: {
			RendererType: 1
		}
		Language: "md"
		Target:   "/home/gopher/somewhere.md"
		Terminal: "term1"
		StepType: 2
		Name:     "step1"
	}
	step0: {
		Stmts: [{
			Output:   "Hello"
			ExitCode: 0
			CmdStr:   "echo -n \"Hello\""
			Negated:  false
		}]
		Order:     0
		DoNotTrim: false
		Terminal:  "term1"
		StepType:  1
		Name:      "step0"
	}
}
Hash: "3687cfa919111d3226121f07d207ed7361a74eec5b26028c4fe7c94e1ba633e9"
Delims: ["{{", "}}"]
-- myguide/out/gen_out_post.cue.golden --
package out

Terminals: [{
	Description: "The main terminal"
	Scenarios: {
		go115: {
			Image: "this_will_never_be_used"
		}
	}
	Name: "term1"
}]
Scenarios: [{
	Description: "Go 1.15"
	Name:        "go115"
}]
Networks: []
Env: []
Steps: {
	step1: {
		Order: 1
		Source: """
			This is some markdown `with code`
			Another line
			A third line
			"""
		Renderer: {
			RendererType: 1
		}
		Language: "md"
		Target:   "/home/gopher/somewhere.md"
		Terminal: "term1"
		StepType: 2
		Name:     "step1"
	}
	step0: {
		Stmts: [{
			Output:   "Hello"
			ExitCode: 0
			CmdStr:   "echo -n \"Hello\""
			Negated:  false
		}]
		Order:     0
		DoNotTrim: false
		Terminal:  "term1"
		StepType:  1
		Name:      "step0"
	}
}
Hash: "3687cfa919111d3226121f07d207ed7361a74eec5b26028c4fe7c94e1ba633e9"
Delims: ["{{", "}}"]
