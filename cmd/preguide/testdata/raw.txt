# Test that we get the expected output when using -raw

# A run should generate stdout but no out/gen_out.cue file
preguide gen -raw -out _output
cmp stdout myguide/stdout
! stderr .+
! exists myguide/out/gen_out.cue

-- myguide/en.markdown --
---
title: myguide
---

<!--step: step1 -->

<!--step: step2 -->
-- myguide/steps.cue --
package steps

import "github.com/play-with-go/preguide"

// We embed preguide.#Guide here as a check that doing so
// means we can correctly validate, decode etc the package
// (because if you try to extract position information from
// the cue.Value that is the package in this case it will
// fail, because of the unification with preguide.#Guide)
//
// TODO: uncomment this once cuelang.org/issue/532 is fixed
// preguide.#Guide

Env: ["A=B"]

Terminals: term1: preguide.#Terminal & {
	Description: "The main terminal"
	Scenarios: go115: Image: "this_will_never_be_used"
}

Scenarios: go115: {
	Description: "Go 1.15"
}

Steps: step1: preguide.#Command & {Source: """
echo -n "Hello, world!"
"""}

Steps: step2: preguide.#Upload & {
	Target: "/home/gopher/special.sh"
	Source: """
echo -n "Hello, world!"
"""
}
-- myguide/stdout --
package out

Terminals: [{
	Description: "The main terminal"
	Scenarios: {
		go115: {
			Image: "this_will_never_be_used"
		}
	}
	Name: "term1"
}]
Scenarios: [{
	Description: "Go 1.15"
	Name:        "go115"
}]
Networks: []
Env: ["A=B"]
Steps: {
	step2: {
		Order:  1
		Source: "echo -n \"Hello, world!\""
		Renderer: {
			RendererType: 1
		}
		Language: "sh"
		Target:   "/home/gopher/special.sh"
		Terminal: "term1"
		StepType: 2
		Name:     "step2"
	}
	step1: {
		Stmts: [{
			ComparisonOutput: "Hello, world!"
			Output:           "Hello, world!"
			ExitCode:         0
			CmdStr:           "echo -n \"Hello, world!\""
			Negated:          false
		}]
		Order:           0
		InformationOnly: false
		DoNotTrim:       false
		Terminal:        "term1"
		StepType:        1
		Name:            "step1"
	}
}
Hash: "c3ff9c8755cc05011560b487162a59cc316da54934b4dd0ac5796bdebd64c0b5"
Delims: ["{{", "}}"]
