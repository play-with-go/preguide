# Test that we get the expected behaviour when using the diff renderer

# Intial run
preguide gen -out _output
! stdout .+
! stderr .+
cmp _output/myguide.markdown myguide/en.markdown.golden
cmp myguide/out/gen_out.cue myguide/out/gen_out.cue.golden

-- myguide/en.markdown --
---
title: A test with all directives
---
# Step 1

<!--step: step0 -->

<!--step: step1 -->

<!--step: step2 -->

-- myguide/steps.cue --
package steps

import "github.com/play-with-go/preguide"

Scenarios: go115: preguide.#Scenario & {
	Description: "Go 1.15"
}

Terminals: term1: preguide.#Terminal & {
	Description: "The main terminal"
	Scenarios: go115: Image: "this_will_never_be_used"
}

Steps: step0: en: preguide.#Command & {
	Source: """
echo -n "Hello"
"""
}

Steps: step1: en: preguide.#Upload & {
	Target:   "/home/gopher/somewhere.md"
	Source: """
This is some markdown `with code`

"""
}

Steps: step2: en: preguide.#Upload & {
	Target:   "/home/gopher/somewhere.md"
	Renderer: preguide.#RenderDiff & {
		Pre: Steps.step1.en.Source
	}
	Source: """
This is some markdown `with code`
Another line
A third line

"""
}

-- myguide/en.markdown.golden --
---
guide: myguide
lang: en
title: A test with all directives
---
# Step 1

```.term1
$ echo -n "Hello"
Hello
```
{:data-command-src="ZWNobyAtbiAiSGVsbG8iCg=="}

<pre data-upload-path="L2hvbWUvZ29waGVy" data-upload-src="c29tZXdoZXJlLm1k:VGhpcyBpcyBzb21lIG1hcmtkb3duIGB3aXRoIGNvZGVgCg==" data-upload-term=".term1"><code class="language-md">This is some markdown `with code`
</code></pre>

<pre data-upload-path="L2hvbWUvZ29waGVy" data-upload-src="c29tZXdoZXJlLm1k:VGhpcyBpcyBzb21lIG1hcmtkb3duIGB3aXRoIGNvZGVgCkFub3RoZXIgbGluZQpBIHRoaXJkIGxpbmUK" data-upload-term=".term1"><code class="language-md">This is some markdown `with code`
<b style="color:darkblue">Another line</b>
<b style="color:darkblue">A third line</b>
</code></pre>

<script>let pageGuide="myguide"; let pageLanguage="en"; let pageScenario="go115";</script>
-- myguide/out/gen_out.cue.golden --
package out

Terminals: [{
	Description: "The main terminal"
	Scenarios: {
		go115: {
			Image: "this_will_never_be_used"
		}
	}
	Name: "term1"
}]
Scenarios: [{
	Description: "Go 1.15"
	Name:        "go115"
}]
Networks: []
Env: []
Langs: {
	en: {
		Hash: "e83870e6a40c0d17db288a9f7b405a090b7ba8e57f4c579d64802268bfa90f45"
		Steps: {
			step2: {
				Order: 2
				Source: """
					This is some markdown `with code`
					Another line
					A third line

					"""
				Renderer: {
					Pre: """
						This is some markdown `with code`

						"""
					RendererType: 3
				}
				Language: "md"
				Target:   "/home/gopher/somewhere.md"
				Terminal: "term1"
				StepType: 2
				Name:     "step2"
			}
			step1: {
				Order: 1
				Source: """
					This is some markdown `with code`

					"""
				Renderer: {
					RendererType: 1
				}
				Language: "md"
				Target:   "/home/gopher/somewhere.md"
				Terminal: "term1"
				StepType: 2
				Name:     "step1"
			}
			step0: {
				Stmts: [{
					TrimmedOutput: "Hello"
					Output:        "Hello"
					ExitCode:      0
					CmdStr:        "echo -n \"Hello\""
					Negated:       false
				}]
				Order:     0
				DoNotTrim: false
				Terminal:  "term1"
				StepType:  1
				Name:      "step0"
			}
		}
	}
}
Delims: ["{{", "}}"]
